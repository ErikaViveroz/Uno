package Juego;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.util.Calendar;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.stream.IntStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Erika Viveroz
 */
public class Uno extends javax.swing.JFrame implements MouseListener{
    
    /*Inicialización de varibles*/
    int playerCardsA = 7,playerCardsB = 7;
    int indexInitialLetter = playerCardsA + playerCardsB;
    int remainingCards = 21;
    int usedCards = 0;
    JButton botonesA[]=new JButton[playerCardsA];
    JButton botonesB[]=new JButton[playerCardsB];
    String remainingDeck[]=new String [remainingCards];
    String colorsUno[] = {"am", "az","ve","ro"};
    String numbersUno[] = {"1","2","3","4","5","6","7","8","9"};
    String fullDeck[] = new String[36];
    String playerName1, playerName2;
    
    int RI[]=new int[36];
    int RC[]=new int[36];
    int j1=0, j2=0;
    String ruta = "cartas/";
    Icon img, imgL;
    ImageIcon image, imageL; 
    
    boolean jugador1=true, jugador2=false;
    
    /*String BD="jdbc:postgresql://127.0.0.1/Uno?";
        String user="postgres";
        String pass="Holas123";
        Statement sentencia=null;
        ResultSet resultado=null;
        //String cadenaDriver="org.postgresql.Driver";
        String consultasql="SELECT * FROM Uno";
    */
    public Uno() {
        initComponents();
        setSize(new Dimension(800,700));//Tamaño de la ventana
        add(jPanel2);
        add(jPanel1);
        playerName1=JOptionPane.showInputDialog("Jugador1 ingresa tu nombre");
        playerName2=JOptionPane.showInputDialog("Jugador2 ingresa tu nombre");
        
        /*Creación Grid y dimensiones*/
        jPanel1.setLayout(new GridLayout(1,playerCardsA));
        jPanel1.setSize(new Dimension((76*playerCardsA),119));
        jPanel2.setLayout(new GridLayout(1,playerCardsB));
        jPanel2.setSize(new Dimension((76*playerCardsB),119));
        
        
        for(int i=0;i<botonesA.length;i++){
            botonesA[i]=new JButton();//Creando botones
            botonesA[i].setBounds(0,0,76,119);//Tamaño botonesA
            botonesA[i].addMouseListener(this);
            jPanel1.add(botonesA[i]);//Añadiendo al Panel los botonesA
            botonesB[i]=new JButton();//Creando botones
            botonesB[i].setBounds(0,0,76,119);//Tamaño botonesA
            botonesB[i].addMouseListener(this);
            jPanel2.add(botonesB[i]);//Añadiendo al Panel los botonesA
        }
        Iniciar();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabel2.setText("Inicia el jugador1");

        jButton1.setText("Agarrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Paso");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reiniciar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Apagar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Puntuación: 0");

        jLabel4.setText("Puntuación: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 540, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel3)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton3))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(jButton4))))))
                .addGap(3, 3, 3)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void Conexion(){
        
        Conexion();
        try {
            Connection conectar=DriverManager.getConnection(BD,user,pass);
            sentencia=conectar.createStatement();
            resultado=sentencia.executeQuery(consultasql);
            
            JOptionPane.showMessageDialog(null, "Conexión exitosa");
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error de conexión"+e);
        }
    }
    
    void GuardarBD(){
        try {
            ArrayList<Datos> lista=new ArrayList<>();
            Datos ob;
            
            while(resultado.next()){
                ob=new Datos();
                ob.setc(resultado.getInt("id_jugador"));
                ob.setnombre(resultado.getString("nombre"));
                ob.setpuntuacion(resultado.getInt("puntuacion"));
                ob.setfecha(resultado.getString("fecha"));
                
                lista.add(ob);
            }
            
            int num=lista.size();
            //txtCod.setText(Integer.toString(num+1));
            
        } 
        catch (SQLException e) {
           JOptionPane.showMessageDialog(null,"Tienes un error de no sé qué pitos");
        }
    }
    void Guardar(){
        try{
            Datos obj = new Datos();
            obj.c=Integer.parseInt(JOptionPane.showInputDialog("Ingresa tu id"));
            obj.nombre=JOptionPane.showInputDialog("Ingresa tu nombre");
            obj.puntuacion=Integer.parseInt(JOptionPane.showInputDialog("Ingresa tu puntuación"));
            Calendar fecha= Calendar.getInstance();
            int año=fecha.get(Calendar.YEAR);
            int mes=fecha.get(Calendar.MONTH);
            int dia=fecha.get(Calendar.DAY_OF_MONTH);
            int hora=fecha.get(Calendar.HOUR_OF_DAY);
            int min=fecha.get(Calendar.MINUTE);
            String f=dia+"/"+mes+"/"+año+"   "+hora+":"+min;
            obj.fecha=f;
            String sentencia2= new String();
            sentencia2="INSERT INTO Uno(id_jugador, nombre, puntuacion, fecha)";
            sentencia2+=" VALUES("+obj.c+","+obj.nombre+","+obj.puntuacion+","+obj.fecha+")";
            sentencia.execute(sentencia2);
            System.out.println("guardado");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Tienes un error de no sé qué pitos2");
        }
        
    }
    
    public void Consulta(){
        Conexion();
        
        try{
           ArrayList<Datos> lista=new ArrayList<>();
           Datos ob;
           while(resultado.next()){
                ob=new Datos();
                ob.setc(resultado.getInt("id_jugador"));
                ob.setnombre(resultado.getString("nombre"));
                ob.setpuntuacion(resultado.getInt("puntuacion"));
                ob.setfecha(resultado.getString("fecha"));
                
                lista.add(ob);
            }
           String[] datos;
           for(Datos elem:lista){
               datos=new String[4];
               datos[0]=Integer.toString(elem.c);
               datos[1]=elem.nombre;
               datos[2]=Integer.toString(elem.puntuacion);
               datos[3]=elem.fecha;
               System.out.println(datos);
           }
           
        }catch(Exception e){
            
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//Agarrar 
        int i=0;
        boolean card=true;
        if(usedCards == remainingCards){
            card=false;
            JOptionPane.showMessageDialog(null, "Ya no hay más imagenes en el monto");
            jButton1.setEnabled(false);
            usedCards = 0;
        }
        if(jugador1){
        while(card){
            if(botonesA[i].getIcon()==null){
                botonesA[i].setEnabled(true);
                image=new ImageIcon(remainingDeck[usedCards]);
                botonesA[i].setName(remainingDeck[usedCards]);
                img=new ImageIcon(image.getImage().getScaledInstance(botonesA[i].getWidth(),botonesA[i].getHeight(),Image.SCALE_DEFAULT));
                botonesA[i].setIcon(img);
                usedCards++;
                card = false;
            }
            i++;
            }
        }
        
        if(jugador2){
        while(card){
            if(botonesB[i].getIcon()==null){
                botonesB[i].setEnabled(true);
                image=new ImageIcon(remainingDeck[usedCards]);
                botonesB[i].setName(remainingDeck[usedCards]);
                img=new ImageIcon(image.getImage().getScaledInstance(botonesA[i].getWidth(),botonesA[i].getHeight(),Image.SCALE_DEFAULT));
                botonesB[i].setIcon(img);
                usedCards++;
                card=false;
            }
            i++;
            }
        }
        //RegeneraBotones();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//Paso
        if(jugador1){
            jLabel2.setText("Va "+playerName2);
            jugador1=false;
            jugador2=true;
        }else{
            if(jugador2){
                jLabel2.setText("Va "+playerName1);
                jugador2=false;
                jugador1=true;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//Reiniciar
    	/*Creo que igual se puede llamar a init, pero tmb funciona, revisar lo del monto*/
        jLabel1.setIcon(null);
        for(int i=0;i<botonesA.length;i++){
            botonesA[i].setIcon(null);
            botonesB[i].setIcon(null);
            botonesA[i].setEnabled(true);
            botonesB[i].setEnabled(true);
            
        }
        Iniciar();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//Apagar, checar la conexión con la BD
        GuardarBD();
        Guardar();
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void Ganador1(){//Las tarjetas no se van quemando?
        int c1=0;
        for(int i=0;i<botonesA.length;i++){
            if(botonesA[i].getIcon()==null){
                c1++;
            }
        }
        if(c1==botonesA.length){
            JOptionPane.showMessageDialog(null, "Gana el jugador1: "+playerName1);
            JOptionPane.showMessageDialog(null,"Apegue o Reinicie el juego");
            j1+=1520;
            jLabel4.setText("Puntuación: "+j1);
        }
        if(c1==6){
            JOptionPane.showMessageDialog(null, "UNO "+playerName1);
        }
          
    }   
    public void Ganador2(){
        int c2=0;
        for(int i=0;i<botonesB.length;i++){
            if(botonesB[i].getIcon()==null){
                c2++;
            }
        }
        if(c2==botonesB.length){
            JOptionPane.showMessageDialog(null, "Gana el jugador2: "+playerName2);
            JOptionPane.showMessageDialog(null,"Apegue o Reinicie el juego");
            j2+=1520;
            jLabel3.setText("Puntuación: "+j2);
        }
        if(c2==6){
            JOptionPane.showMessageDialog(null, "UNO: "+playerName2);
        }
            
    }   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Uno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public void Iniciar() {
        jugador1=true; jugador2=false;
        int k=7,CLabel=playerCardsA+playerCardsB+1;
        AleatoriosI();
        Cartas();
        imageL=new ImageIcon(fullDeck[RI[indexInitialLetter]]);//Se le otorga la ruta del arreglo
        jLabel1.setName(fullDeck[RI[indexInitialLetter]]);
        imgL=new ImageIcon(imageL.getImage().getScaledInstance(jLabel1.getWidth(),jLabel1.getHeight(),Image.SCALE_DEFAULT));
        jLabel1.setIcon(imgL);//Se añaden imagenes a los botones en posicion
        jLabel2.setText("Inicia "+playerName1);

        for(int i=0;i<botonesA.length;i++){
            image=new ImageIcon(fullDeck[RI[i]]);//Se le otorga la ruta del arreglo
            botonesA[i].setName(fullDeck[RI[i]]);
            img=new ImageIcon(image.getImage().getScaledInstance(botonesA[i].getWidth(),botonesA[i].getHeight(),Image.SCALE_DEFAULT));
            botonesA[i].setIcon(img);//Se añaden imagenes a los botones en posicion
            
            image=new ImageIcon(fullDeck[RI[k]]);//Se le otorga la ruta del arreglo
            botonesB[i].setName(fullDeck[RI[k]]);
            img=new ImageIcon(image.getImage().getScaledInstance(botonesB[i].getWidth(),botonesB[i].getHeight(),Image.SCALE_DEFAULT));
            botonesB[i].setIcon(img);//Se añaden imagenes a los botones en posicion
            k++;
        }
        
        for(int i=0;i<remainingDeck.length;i++){
        	remainingDeck[i]=fullDeck[RI[CLabel]];
            CLabel++;
        }
        jButton1.setEnabled(true);
    }
    
    public void AleatoriosI(){ //Deberían ser más con las cartas especiales
        Random aleatorios=new Random();
        int N[]=IntStream.range(0, 36).toArray();//este es para las imagenes de la tarjeta que cambia
            for(int i=N.length;i>0;i--){
                int posicion=aleatorios.nextInt(i);
                int tmp=N[i-1];
                N[i-1]=N[posicion];
                N[posicion]=tmp;
            }
            for(int i=0;i<N.length;i++){
                RI[i]=N[i];
            }
    }
    
    public void Cartas(){
        int x=0;
            for(int j=0;j<colorsUno.length;j++) {
                for(int k=0;k<numbersUno.length;k++){
                	fullDeck[x]=ruta+colorsUno[j]+numbersUno[k]+".jpg";
                    x++;
                }
            }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    if(jugador1){ 
        for(int i=0;i<botonesA.length;i++){
            if(e.getSource()==botonesA[i]){
                if(verificaSiEsColor(botonesA[i])){
                    botonesA[i].setIcon(null);
                    botonesA[i].setEnabled(false);
                    ImagenLabel(botonesA[i].getName());
                    botonesA[i].setName(null);
                    jLabel2.setText("Va "+playerName2);
                    jugador1=false;
                    jugador2=true;
                    Ganador1();
                }else if(verificaSiEsNumero(botonesA[i])){
                    botonesA[i].setIcon(null);
                    botonesA[i].setEnabled(false);
                    ImagenLabel(botonesA[i].getName());
                    botonesA[i].setName(null);
                    jLabel2.setText("Va "+playerName2);
                    jugador1=false;
                    jugador2=true;
                    Ganador1();
                }//Cartas especiales, si es un +4 se crea otra funcion?
            }
        }
    }
    if(jugador2){
        for(int i=0;i<botonesB.length;i++){
            if(e.getSource()==botonesB[i]){
                if(verificaSiEsColor(botonesB[i])){
                    botonesB[i].setIcon(null);
                    botonesB[i].setEnabled(false);
                    ImagenLabel(botonesB[i].getName());
                    botonesB[i].setName(null);
                    jLabel2.setText("Va "+playerName1);
                    jugador1=true;
                    jugador2=false;
                    Ganador2();
                }else if(verificaSiEsNumero(botonesB[i])){
                    botonesB[i].setIcon(null);
                    botonesB[i].setEnabled(false);
                    ImagenLabel(botonesB[i].getName());
                    botonesB[i].setName(null);
                    jLabel2.setText("Va "+playerName1);
                    jugador1=true;
                    jugador2=false;
                    Ganador2();
                }//Cartas especiales 
            }
        }
        
    }
    
    }
    
    public void ImagenLabel(String nombre){
        imageL=new ImageIcon(nombre);//Se le otorga la ruta del arreglo
        jLabel1.setName(nombre);
        imgL=new ImageIcon(imageL.getImage().getScaledInstance(jLabel1.getWidth(),jLabel1.getHeight(),Image.SCALE_DEFAULT));
        jLabel1.setIcon(imgL);//Se añaden imagenes a los botones en posicion
    }
    
    public boolean verificaSiEsColor(JButton boton){
        String busca="";
        String Label=jLabel1.getName();
        String btn=boton.getName();
        String color="", colors="";
        for(int i=0;i<numbersUno.length;i++){
            busca=ruta+colorsUno[0]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="am"; 
            }
            busca=ruta+colorsUno[1]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="az"; 
            }
            busca=ruta+colorsUno[2]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="ve"; 
            }
            busca=ruta+colorsUno[3]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="ro"; 
            }
        }
        for(int i=0;i<numbersUno.length;i++){
            busca=ruta+colorsUno[0]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="am"; 
            }
            busca=ruta+colorsUno[1]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="az"; 
            }
            busca=ruta+colorsUno[2]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="ve"; 
            }
            busca=ruta+colorsUno[3]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="ro"; 
            }
        }
        if(color.equalsIgnoreCase(colors)){
            return true;
        }
        
        return false;
    }
    
    public boolean verificaSiEsNumero(JButton boton){
        String busca="", num="", nume="";
        String Label=jLabel1.getName();
        String btn=boton.getName();
        for(int i=0;i<colorsUno.length;i++){
            busca=ruta+colorsUno[i]+numbersUno[0]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="1";
            }
            busca=ruta+colorsUno[i]+numbersUno[1]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="2";
            }
            busca=ruta+colorsUno[i]+numbersUno[2]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="3";
            }
            busca=ruta+colorsUno[i]+numbersUno[3]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="4";
            }
            busca=ruta+colorsUno[i]+numbersUno[4]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="5";
            }
            busca=ruta+colorsUno[i]+numbersUno[5]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="6";
            }
            busca=ruta+colorsUno[i]+numbersUno[6]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="7";
            }
            busca=ruta+colorsUno[i]+numbersUno[7]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="8";
            }
            busca=ruta+colorsUno[i]+numbersUno[8]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="9";
            }
        }
        for(int i=0;i<colorsUno.length;i++){
            busca=ruta+colorsUno[i]+numbersUno[0]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="1";
            }
            busca=ruta+colorsUno[i]+numbersUno[1]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="2";
            }
            busca=ruta+colorsUno[i]+numbersUno[2]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="3";
            }
            busca=ruta+colorsUno[i]+numbersUno[3]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="4";
            }
            busca=ruta+colorsUno[i]+numbersUno[4]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="5";
            }
            busca=ruta+colorsUno[i]+numbersUno[5]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="6";
            }
            busca=ruta+colorsUno[i]+numbersUno[6]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="7";
            }
            busca=ruta+colorsUno[i]+numbersUno[7]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="8";
            }
            busca=ruta+colorsUno[i]+numbersUno[8]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="9";
            }
        }
        if(num.equalsIgnoreCase(nume)){
            return true;
        }
        return false;
    }
    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}

    
    
}
