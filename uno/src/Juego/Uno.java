package Juego;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.util.Calendar;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.stream.IntStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Erika Viveroz
 */
public class Uno extends javax.swing.JFrame implements MouseListener{
	
	/*Inicialización de Componentes*/
	private javax.swing.JButton jButtonDrawCard;
    private javax.swing.JButton jButtonPassTurn;
    private javax.swing.JButton jButtonRestart;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JLabel jLabelCard;
    private javax.swing.JLabel jLabelPlayer;
    private javax.swing.JLabel jLabelPlayerScoreA;
    private javax.swing.JLabel jLabelPlayerScoreB;
    private javax.swing.JPanel jPanelPlayerA;
    private javax.swing.JPanel jPanelPlayerB;
	
    /*Inicialización de varibles*/
    int playerCardsA = 7,playerCardsB = 7;
    int indexInitialLetter = playerCardsA + playerCardsB;
    int remainingCards = 21;
    int usedCards = 0;
    int RI[]=new int[36];
    int playerScore1 = 0, playerScore2 = 0;
    JButton playerButtonsA []=new JButton[playerCardsA];
    JButton playerButtonsB []=new JButton[playerCardsB];
    String remainingDeck[]=new String [remainingCards];
    String colorsUno[] = {"am", "az","ve","ro"};
    String numbersUno[] = {"1","2","3","4","5","6","7","8","9"};
    String fullDeck[] = new String[36];
    String playerName1, playerName2;
    String route = "cartas/";
    Icon img, imgL;
    ImageIcon image, currentCard;  
    boolean isPlayerOneTurn = true;
    
    /*Conexión con la base de datos*/
    /*String BD="jdbc:postgresql://127.0.0.1/Uno?";
        String user="postgres";
        String pass="Holas123";
        Statement sentencia=null;
        ResultSet resultado=null;
        //String cadenaDriver="org.postgresql.Driver";
        String consultasql="SELECT * FROM Uno";
    */
    public Uno() {
        initComponents();
        setSize(new Dimension(800,700));
        add(jPanelPlayerB);
        add(jPanelPlayerA);
        playerName1=JOptionPane.showInputDialog("Jugador1 ingresa tu nombre");
        playerName2=JOptionPane.showInputDialog("Jugador2 ingresa tu nombre");
        
        /*Creación Grid y dimensiones*/
        jPanelPlayerA.setLayout(new GridLayout(1,playerCardsA));
        jPanelPlayerA.setSize(new Dimension((76*playerCardsA),119));
        jPanelPlayerB.setLayout(new GridLayout(1,playerCardsB));
        jPanelPlayerB.setSize(new Dimension((76*playerCardsB),119));
        
        for(int i=0;i<playerButtonsA.length;i++){
        	playerButtonsA[i]=new JButton();
        	playerButtonsA[i].setBounds(0,0,76,119);
        	playerButtonsA[i].addMouseListener(this);
        	jPanelPlayerA.add(playerButtonsA[i]);
            playerButtonsB[i]=new JButton();
            playerButtonsB[i].setBounds(0,0,76,119);
            playerButtonsB[i].addMouseListener(this);
            jPanelPlayerB.add(playerButtonsB[i]);
        }
        start();
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Uno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Uno().setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	/*Se crea toda la interfaz, botones, etiquetas, paneles y adentro los botones*/
    	jPanelPlayerA = new javax.swing.JPanel();
    	jLabelCard = new javax.swing.JLabel();
        jPanelPlayerB = new javax.swing.JPanel();
        jLabelPlayer = new javax.swing.JLabel();
        jButtonDrawCard = new javax.swing.JButton();
        jButtonPassTurn = new javax.swing.JButton();
        jButtonRestart = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabelPlayerScoreA = new javax.swing.JLabel();
        jLabelPlayerScoreB = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelPlayerA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanelPlayerA);
        jPanelPlayerA.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        jLabelCard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanelPlayerB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanelPlayerB);
        jPanelPlayerB.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        jLabelPlayer.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabelPlayer.setText("Inicia el jugador1");

        jButtonDrawCard.setText("Draw");
        jButtonDrawCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDrawCardActionPerformed(evt);
            }
        });

        jButtonPassTurn.setText("Pass");
        jButtonPassTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPassTurnActionPerformed(evt);
            }
        });

        jButtonRestart.setText("Restart");
        jButtonRestart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRestartMouseClicked(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabelPlayerScoreA.setText("Puntuación: 0");

        jLabelPlayerScoreB.setText("Puntuación: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jLabelPlayer)
                .addGap(53, 53, 53)
                .addComponent(jLabelCard, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDrawCard)
                    .addComponent(jButtonPassTurn))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonRestart)
                    .addComponent(jButtonExit))
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelPlayerB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelPlayerA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelPlayerScoreB, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelPlayerScoreA, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 540, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanelPlayerB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabelPlayerScoreB)
                        .addGap(46, 46, 46)
                        .addComponent(jLabelPlayer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCard, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonDrawCard)
                                    .addComponent(jButtonRestart))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonPassTurn)
                                    .addComponent(jButtonExit))))))
                .addGap(3, 3, 3)
                .addComponent(jLabelPlayerScoreA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(jPanelPlayerA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void start() {
    	/*Se generan los números aletorios para asignarlos a las cartas
    	 * se asignan cartas al mazo restante, la carta inicial y las cartas de los jugadores */
    	
    	isPlayerOneTurn = true;
        int k=7;
        int CLabel = playerCardsA + playerCardsB + 1;
        generateRandoms();
        manageCards();
        currentCard=new ImageIcon(fullDeck[RI[indexInitialLetter]]);
        jLabelCard.setName(fullDeck[RI[indexInitialLetter]]);
        imgL=new ImageIcon(currentCard.getImage().getScaledInstance(jLabelCard.getWidth(),jLabelCard.getHeight(),Image.SCALE_DEFAULT));
        jLabelCard.setIcon(imgL);
        
        jLabelPlayer.setText("Inicia "+playerName1);

        for(int i=0;i<playerButtonsA.length;i++){
            image=new ImageIcon(fullDeck[RI[i]]);
            playerButtonsA[i].setName(fullDeck[RI[i]]);
            img=new ImageIcon(image.getImage().getScaledInstance(playerButtonsA[i].getWidth(),playerButtonsA[i].getHeight(),Image.SCALE_DEFAULT));
            playerButtonsA[i].setIcon(img);
            
            image=new ImageIcon(fullDeck[RI[k]]);
            playerButtonsB[i].setName(fullDeck[RI[k]]);
            img=new ImageIcon(image.getImage().getScaledInstance(playerButtonsB[i].getWidth(),playerButtonsB[i].getHeight(),Image.SCALE_DEFAULT));
            playerButtonsB[i].setIcon(img);
            k++;
        }
        
        for(int i=0;i<remainingDeck.length;i++){
        	remainingDeck[i]=fullDeck[RI[CLabel]];
            CLabel++;
        }
        jButtonDrawCard.setEnabled(true);
    }
    
    public void generateRandoms(){ 
    	/*Se genera un arreglo con numeros aleatorios para reorganizar las cartas*/
        Random random = new Random();
        int N[] = IntStream.range(0, 36).toArray();
            for(int i = N.length; i > 0; i--){
                int j = random.nextInt(i);
                int tmp = N[i-1];
                N[i-1] = N[j];
                N[j] = tmp;
            }
            for(int i=0;i<N.length;i++){
                RI[i] = N[i];
            }
    }
    
    public void manageCards(){
        int x=0;
            for(int j=0;j<colorsUno.length;j++) {
                for(int k=0;k<numbersUno.length;k++){
                	fullDeck[x]=route+colorsUno[j]+numbersUno[k]+".jpg";// se agregan al final las tarjetas especiales
                    x++;
                }
            }
    }
    
    private void jButtonDrawCardActionPerformed(java.awt.event.ActionEvent evt) {
        int i=0;
        boolean card=true;
        if(usedCards == remainingCards){
            card=false;
            JOptionPane.showMessageDialog(null, "Ya no hay más imagenes en el monto");
            jButtonDrawCard.setEnabled(false);
            usedCards = 0;
        }
        if(isPlayerOneTurn){
        while(card){
            if(playerButtonsA[i].getIcon()==null){
            	playerButtonsA[i].setEnabled(true);
                image=new ImageIcon(remainingDeck[usedCards]);
                playerButtonsA[i].setName(remainingDeck[usedCards]);
                img=new ImageIcon(image.getImage().getScaledInstance(playerButtonsA[i].getWidth(),playerButtonsA[i].getHeight(),Image.SCALE_DEFAULT));
                playerButtonsA[i].setIcon(img);
                usedCards++;
                card = false;
            }
            i++;
            }
        }
        
        if(!isPlayerOneTurn){
        while(card){
            if(playerButtonsB[i].getIcon()==null){
            	playerButtonsB[i].setEnabled(true);
                image=new ImageIcon(remainingDeck[usedCards]);
                playerButtonsB[i].setName(remainingDeck[usedCards]);
                img=new ImageIcon(image.getImage().getScaledInstance(playerButtonsB[i].getWidth(),playerButtonsB[i].getHeight(),Image.SCALE_DEFAULT));
                playerButtonsB[i].setIcon(img);
                usedCards++;
                card=false;
            }
            i++;
            }
        }
        //RegeneraBotones();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonPassTurnActionPerformed(java.awt.event.ActionEvent evt) {
        if(isPlayerOneTurn){
        	jLabelPlayer.setText("Va "+playerName2);
            isPlayerOneTurn = !isPlayerOneTurn;
        }else{
            if(!isPlayerOneTurn){
            	jLabelPlayer.setText("Va "+playerName1);
                isPlayerOneTurn = !isPlayerOneTurn;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonRestartMouseClicked(java.awt.event.MouseEvent evt) {
    	jLabelCard.setIcon(null);
        for(int i=0;i<playerButtonsA.length;i++){
        	playerButtonsA[i].setIcon(null);
        	playerButtonsB[i].setIcon(null);
        	playerButtonsA[i].setEnabled(true);
        	playerButtonsB[i].setEnabled(true);
            
        }
        start();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//Checar la conexión con la BD
        GuardarBD();
        Guardar();
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void winningPlayerA(){
        int c1=0;
        for(int i=0;i<playerButtonsA.length;i++){
            if(playerButtonsA[i].getIcon()==null){
                c1++;
            }
        }
        if(c1==playerButtonsA.length){
            JOptionPane.showMessageDialog(null, "Gana el jugador1: "+playerName1);
            JOptionPane.showMessageDialog(null,"Apegue o Reinicie el juego");
            playerScore1 +=1520;
            jLabelPlayerScoreA.setText("Puntuación: "+playerScore1);
        }
        if(c1==6){
            JOptionPane.showMessageDialog(null, "UNO "+playerName1);
        }
          
    }   
    public void winningPlayerB(){
        int c2=0;
        for(int i=0;i<playerButtonsB.length;i++){
            if(playerButtonsB[i].getIcon()==null){
                c2++;
            }
        }
        if(c2==playerButtonsB.length){
            JOptionPane.showMessageDialog(null, "Gana el jugador2: "+playerName2);
            JOptionPane.showMessageDialog(null,"Apegue o Reinicie el juego");
            playerScore2 +=1520;
            jLabelPlayerScoreB.setText("Puntuación: "+playerScore2);
        }
        if(c2==6){
            JOptionPane.showMessageDialog(null, "UNO: "+playerName2);
        }
            
    }   
    
    @Override
    public void mouseClicked(MouseEvent e) {//Evento para cada selección de tarjeta
    if(isPlayerOneTurn){ 
        for(int i=0;i<playerButtonsA.length;i++){
            if(e.getSource() == playerButtonsA[i]){
                if(verifyColorMatch(playerButtonsA[i])){
                	playerButtonsA[i].setIcon(null);
                	playerButtonsA[i].setEnabled(false);
                    currentCard(playerButtonsA[i].getName());
                    playerButtonsA[i].setName(null);
                    jLabelPlayer.setText("Va "+playerName2);
                    isPlayerOneTurn = !isPlayerOneTurn;
                    winningPlayerA();
                }else if(verifyNumberMatch(playerButtonsA[i])){
                	playerButtonsA[i].setIcon(null);
                	playerButtonsA[i].setEnabled(false);
                    currentCard(playerButtonsA[i].getName());
                    playerButtonsA[i].setName(null);
                    jLabelPlayer.setText("Va "+playerName2);
                    isPlayerOneTurn = !isPlayerOneTurn;
                    winningPlayerA();
                }
            }
        }
    }
    if(!isPlayerOneTurn){
        for(int i=0;i<playerButtonsB.length;i++){
            if(e.getSource() == playerButtonsB[i]){
                if(verifyColorMatch(playerButtonsB[i])){
                	playerButtonsB[i].setIcon(null);
                	playerButtonsB[i].setEnabled(false);
                    currentCard(playerButtonsB[i].getName());
                    playerButtonsB[i].setName(null);
                    jLabelPlayer.setText("Va "+playerName1);
                    isPlayerOneTurn = !isPlayerOneTurn;
                    winningPlayerB();
                }else if(verifyNumberMatch(playerButtonsB[i])){
                	playerButtonsB[i].setIcon(null);
                	playerButtonsB[i].setEnabled(false);
                    currentCard(playerButtonsB[i].getName());
                    playerButtonsB[i].setName(null);
                    jLabelPlayer.setText("Va "+playerName1);
                    isPlayerOneTurn = !isPlayerOneTurn;
                    winningPlayerB();
                }
            }
        }
        
    }
    
    }
    
    public void currentCard(String nombre){
    	currentCard=new ImageIcon(nombre);
    	jLabelCard.setName(nombre);
        imgL=new ImageIcon(currentCard.getImage().getScaledInstance(jLabelCard.getWidth(),jLabelCard.getHeight(),Image.SCALE_DEFAULT));
        jLabelCard.setIcon(imgL);
    }
    
    public boolean verifyColorMatch(JButton boton){
        String busca="";
        String Label=jLabelCard.getName();
        String btn=boton.getName();
        String color="", colors="";
        for(int i=0;i<numbersUno.length;i++){
            busca=route+colorsUno[0]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="am"; 
            }
            busca=route+colorsUno[1]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="az"; 
            }
            busca=route+colorsUno[2]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="ve"; 
            }
            busca=route+colorsUno[3]+numbersUno[i]+".jpg";
            if(btn.equalsIgnoreCase(busca)){
                color="ro"; 
            }
        }
        for(int i=0;i<numbersUno.length;i++){
            busca=route+colorsUno[0]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="am"; 
            }
            busca=route+colorsUno[1]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="az"; 
            }
            busca=route+colorsUno[2]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="ve"; 
            }
            busca=route+colorsUno[3]+numbersUno[i]+".jpg";
            if(Label.equalsIgnoreCase(busca)){
                colors="ro"; 
            }
        }
        if(color.equalsIgnoreCase(colors)){
            return true;
        }
        
        return false;
    }
    
    public boolean verifyNumberMatch(JButton boton){
        String busca="", num="", nume="";
        String Label=jLabelCard.getName();
        String btn=boton.getName();
        for(int i=0;i<colorsUno.length;i++){
            busca=route+colorsUno[i]+numbersUno[0]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="1";
            }
            busca=route+colorsUno[i]+numbersUno[1]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="2";
            }
            busca=route+colorsUno[i]+numbersUno[2]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="3";
            }
            busca=route+colorsUno[i]+numbersUno[3]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="4";
            }
            busca=route+colorsUno[i]+numbersUno[4]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="5";
            }
            busca=route+colorsUno[i]+numbersUno[5]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="6";
            }
            busca=route+colorsUno[i]+numbersUno[6]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="7";
            }
            busca=route+colorsUno[i]+numbersUno[7]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="8";
            }
            busca=route+colorsUno[i]+numbersUno[8]+".jpg";  
            if(btn.equalsIgnoreCase(busca)){
                num="9";
            }
        }
        for(int i=0;i<colorsUno.length;i++){
            busca=route+colorsUno[i]+numbersUno[0]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="1";
            }
            busca=route+colorsUno[i]+numbersUno[1]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="2";
            }
            busca=route+colorsUno[i]+numbersUno[2]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="3";
            }
            busca=route+colorsUno[i]+numbersUno[3]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="4";
            }
            busca=route+colorsUno[i]+numbersUno[4]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="5";
            }
            busca=route+colorsUno[i]+numbersUno[5]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="6";
            }
            busca=route+colorsUno[i]+numbersUno[6]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="7";
            }
            busca=route+colorsUno[i]+numbersUno[7]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="8";
            }
            busca=route+colorsUno[i]+numbersUno[8]+".jpg";  
            if(Label.equalsIgnoreCase(busca)){
                nume="9";
            }
        }
        if(num.equalsIgnoreCase(nume)){
            return true;
        }
        return false;
    }
    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}


    void Conexion(){
        
        Conexion();
        try {
            Connection conectar=DriverManager.getConnection(BD,user,pass);
            sentencia=conectar.createStatement();
            resultado=sentencia.executeQuery(consultasql);
            
            JOptionPane.showMessageDialog(null, "Conexión exitosa");
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error de conexión"+e);
        }
    }
    void GuardarBD(){
        try {
            ArrayList<Datos> lista=new ArrayList<>();
            Datos ob;
            
            while(resultado.next()){
                ob=new Datos();
                ob.setc(resultado.getInt("id_jugador"));
                ob.setnombre(resultado.getString("nombre"));
                ob.setpuntuacion(resultado.getInt("puntuacion"));
                ob.setfecha(resultado.getString("fecha"));
                
                lista.add(ob);
            }
            
            int num=lista.size();
            //txtCod.setText(Integer.toString(num+1));
            
        } 
        catch (SQLException e) {
           JOptionPane.showMessageDialog(null,"Tienes un error de no sé qué pitos");
        }
    }
    void Guardar(){
        try{
            Datos obj = new Datos();
            obj.c=Integer.parseInt(JOptionPane.showInputDialog("Ingresa tu id"));
            obj.nombre=JOptionPane.showInputDialog("Ingresa tu nombre");
            obj.puntuacion=Integer.parseInt(JOptionPane.showInputDialog("Ingresa tu puntuación"));
            Calendar fecha= Calendar.getInstance();
            int año=fecha.get(Calendar.YEAR);
            int mes=fecha.get(Calendar.MONTH);
            int dia=fecha.get(Calendar.DAY_OF_MONTH);
            int hora=fecha.get(Calendar.HOUR_OF_DAY);
            int min=fecha.get(Calendar.MINUTE);
            String f=dia+"/"+mes+"/"+año+"   "+hora+":"+min;
            obj.fecha=f;
            String sentencia2= new String();
            sentencia2="INSERT INTO Uno(id_jugador, nombre, puntuacion, fecha)";
            sentencia2+=" VALUES("+obj.c+","+obj.nombre+","+obj.puntuacion+","+obj.fecha+")";
            sentencia.execute(sentencia2);
            System.out.println("guardado");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Tienes un error de no sé qué pitos2");
        }
        
    }
    public void Consulta(){
        Conexion();
        
        try{
           ArrayList<Datos> lista=new ArrayList<>();
           Datos ob;
           while(resultado.next()){
                ob=new Datos();
                ob.setc(resultado.getInt("id_jugador"));
                ob.setnombre(resultado.getString("nombre"));
                ob.setpuntuacion(resultado.getInt("puntuacion"));
                ob.setfecha(resultado.getString("fecha"));
                
                lista.add(ob);
            }
           String[] datos;
           for(Datos elem:lista){
               datos=new String[4];
               datos[0]=Integer.toString(elem.c);
               datos[1]=elem.nombre;
               datos[2]=Integer.toString(elem.puntuacion);
               datos[3]=elem.fecha;
               System.out.println(datos);
           }
           
        }catch(Exception e){
            
        }
    }
    
}
